#!/bin/sh
##
# Copyright 2008-2009 Apple Inc.
# All rights reserved.
#
# MacOSX platform
# This script runs all of the unit tests for the target test bundle specified by the passed-in environment.
# This script is generally intended to be invoked by ${DEVELOPER_TOOLS_DIR}/RunUnitTests. The interface or location of this script may change in future releases.
##
#
# Input:
#   See ${DEVELOPER_TOOLS_DIR}/RunUnitTests for input variables

Message() {
# usage: Message line type message
# Echo the message to stdout as the given type of message and continue
    echo "${DEVELOPER_DIR}/Tools/RunPlatformUnitTests:${1}: ${2}: ${3}"
}

Note() {
# usage: Notify line message
# Echo the message to stdout as a note and continue
    Message "${1}" note "${2}"
}

Warning() {
# usage: Warning line message
# Echo the message to stdout as a note and continue
    Message "${1}" warning "${2}"
}

Error() {
# usage: Notify line message
# Echo the message to stdout as an error and continue
    Message "${1}" error "${2}"
}

Fail() {
# usage: Fail line message
# Echo the message to stdout and return 1, the universal error code
    Error "${1}" "${2}"
    exit 1
}

### Do not run tests on anything but a "build".

if [ "${ACTION}" != "build" ]; then
    exit 0
fi

### Silently skip tests if TEST_AFTER_BUILD is NO

if [ "${TEST_AFTER_BUILD}" = "NO" ]; then
    exit 0
fi

### Source RunUnitTests.include functionality

if [ "${DEVELOPER_TOOLS_DIR}" = "" ]; then
    Fail ${LINENO} "DEVELOPER_TOOLS_DIR is not set."
fi

includeFile="${DEVELOPER_TOOLS_DIR}/RunPlatformUnitTests.include"
if [ ! -r "${includeFile}" ]; then
    Fail ${LINENO} "Cannot read include file ${includeFile}"
fi

source "${includeFile}"

if [ 0 != $? ]; then
    Fail ${LINENO} "Could not source include file ${includeFile}"
fi

### RunPlatformUnitTests.include overrides

ValidateTestArch() {
    testArch="$1"
    testGCState="$2"
    # If trying to test ppc on i386 or x86_64...
    if [ "${testArch}" = "ppc" -a \( "${NATIVE_ARCH_ACTUAL}" = "i386" -o "${NATIVE_ARCH_ACTUAL}" = "x86_64" \) ]; then
        # ...Rosetta must be installed and GC must be off.
        if [ -e /usr/libexec/oah/translate -a "${testGCState}" = "OFF" ]; then
            return 0
        else
            return 1
        fi
    else
        return 0
    fi
}

### Define sensible defaults for the path to the otest and CPlusTestRig tools, but allow them to be overridden.

if [ "${OTEST}" = "" ]; then
    OTEST="${DEVELOPER_DIR}/Tools/otest"
fi

if [ "${CPLUSTESTRIG}" = "" ]; then
    CPLUSTESTRIG="${DEVELOPER_DIR}/Tools/CPlusTestRig"
fi

Main() {
# usage: Main
# Determine how tests need to be run and run them.

    Configure_TEST_GC_STATES
    Configure_TEST_ARCHS
    
    if [ "${TEST_HOST}" != "" ]; then
        # All applications are tested the same way, by injecting a bundle.
        # The bundle needs to configure and run the tests itself somehow.
        
        RunTestsForApplication "${TEST_HOST}" "${TEST_BUNDLE_PATH}"
    else
        # If no TEST_HOST is specified, assume we're running the test bundle.
        
        RunTestsForBundle "${TEST_BUNDLE_PATH}"
    fi
}

### Update the dyld environment to support running tests out of the build directory.

# Sets and exports the following environment variables:
#   DYLD_FRAMEWORK_PATH
#   DYLD_LIBRARY_PATH
#   DYLD_NEW_LOCAL_SHARED_REGIONS
#   DYLD_NO_FIX_PREBINDING

if [ "${DYLD_FRAMEWORK_PATH}" != "" ]; then
    DYLD_FRAMEWORK_PATH="${BUILT_PRODUCTS_DIR}:${DEVELOPER_DIR}/Library/Frameworks:${DYLD_FRAMEWORK_PATH}"
else
    DYLD_FRAMEWORK_PATH="${BUILT_PRODUCTS_DIR}:${DEVELOPER_DIR}/Library/Frameworks"
fi

if [ "${DYLD_LIBRARY_PATH}" != "" ]; then
    DYLD_LIBRARY_PATH="${BUILT_PRODUCTS_DIR}:${DYLD_LIBRARY_PATH}"
else
    DYLD_LIBRARY_PATH="${BUILT_PRODUCTS_DIR}"
fi

DYLD_NEW_LOCAL_SHARED_REGIONS=YES
DYLD_NO_FIX_PREBINDING=YES

EXPORT_VARS=(DYLD_FRAMEWORK_PATH DYLD_LIBRARY_PATH DYLD_NEW_LOCAL_SHARED_REGIONS DYLD_NO_FIX_PREBINDING)

### Run the tests

Main
