#!/bin/sh

#
# Copyright (c) 2005-2009 Apple Inc.  All rights reserved.
#

# Copyright (c) 1997-2005, Sen:te (Sente SA).  All rights reserved.
#
# Use of this source code is governed by the following license:
# 
# Redistribution and use in source and binary forms, with or without modification, 
# are permitted provided that the following conditions are met:
# 
# (1) Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer.
# 
# (2) Redistributions in binary form must reproduce the above copyright notice, 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS IS'' 
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
# IN NO EVENT SHALL Sente SA OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT 
# OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) 
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, 
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# Note: this license is equivalent to the FreeBSD license.
# 
# This notice may not be removed from this file.

if [ "${NATIVE_ARCH_ACTUAL}" = "" ]; then
    NATIVE_ARCH_ACTUAL=`arch`
fi

if [ "${ARCHS}" = "" ]; then
    ARCHS=`arch`
fi

if [ "${DEVELOPER_DIR}" = "" ]; then
    DEVELOPER_DIR="${SYSTEM_DEVELOPER_DIR}"
fi 

if [ "${OTEST}" = "" ]; then
    OTEST="${DEVELOPER_DIR}/Tools/otest"
fi

if [ "${OTEST_TARGET}" = "" ]; then
    OTEST_TARGET="${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}"
fi

if [ "${GCC_ENABLE_OBJC_GC}" = "" ]; then
    GCC_ENABLE_OBJC_GC="unsupported"
fi

RunTargetUnitTestsForArchAndGC() {
    echo "${DEVELOPER_DIR}/Tools/RunTargetUnitTests:0: note: Starting tests for ${1} (GC ${2})"
    
    if [ "${DYLD_FRAMEWORK_PATH}" = "" ] ; then
        DYLD_FRAMEWORK_PATH="${BUILT_PRODUCTS_DIR}:${DEVELOPER_DIR}/Library/Frameworks"
    else
        DYLD_FRAMEWORK_PATH="${BUILT_PRODUCTS_DIR}:${DEVELOPER_DIR}/Library/Frameworks:${DYLD_FRAMEWORK_PATH}"
    fi
    
    export DYLD_FRAMEWORK_PATH
    
    echo "OTEST=${OTEST}"
    
    if [ "${2}" = "OFF" ]; then
        OBJC_DISABLE_GC=YES
        export OBJC_DISABLE_GC
    fi
    
    arch -arch "${1}" "${OTEST}" "${OTEST_TARGET}"
    
    unset DYLD_FRAMEWORK_PATH

    echo "${DEVELOPER_DIR}/Tools/RunTargetUnitTests:0: note: Completed tests for ${1}"
}

SkipTargetUnitTestsForArchAndGC() {
    echo "${DEVELOPER_DIR}/Tools/RunTargetUnitTests:0: note: Skipped tests for ${1} (GC ${2})"
}

if [ "${TEST_AFTER_BUILD}" = "YES" ]; then
    # Determine what level of GC support to test.  If GC is supported but not required, run tests first with it off and then with it on.  Anything but "supported" or "required" is equivalent to "unsupported".
    case "${GCC_ENABLE_OBJC_GC}" in
    supported)
        TEST_GC_STATES="OFF ON"
        ;;
    required)
        TEST_GC_STATES="ON"
        ;;
    *)
        TEST_GC_STATES="OFF"
        ;;
    esac
    
    # Run the unit tests once per requested and supported architecture and requested and supported GC state.
    for TEST_GC_STATE in ${TEST_GC_STATES}; do
        for TEST_ARCH in ${ARCHS}; do
            case "${NATIVE_ARCH_ACTUAL}" in
            ppc)
                if [ "${TEST_ARCH}" = "ppc" ]; then
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                else
                    SkipTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                fi
                ;;
                
            ppc64)
                if [ "${TEST_ARCH}" = "ppc" -o "${TEST_ARCH}" = "ppc64" ]; then
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                else
                    SkipTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                fi
                ;;
                
            i386)
                if [ "${TEST_ARCH}" = "i386" ]; then
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                elif [ "${TEST_ARCH}" = "ppc" -a "${TEST_GC_STATE}" = "NO" ]; then
                    # Rosetta cannot run Objective-C code with GC.
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                else
                    SkipTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                fi
                ;;
                
            x86_64)
                if [ "${TEST_ARCH}" = "i386" -o "${TEST_ARCH}" = "x86_64" ]; then
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                elif [ "${TEST_ARCH}" = "ppc" -a "${TEST_GC_STATE}" = "NO" ]; then
                    # Rosetta cannot run Objective-C code with GC.
                    RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                else
                    SkipTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                fi
                ;;
                
            *)
                RunTargetUnitTestsForArchAndGC "${TEST_ARCH}" "${TEST_GC_STATE}"
                ;;
            esac
        done
    done
fi
